{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Users/users.module.css","components/Header/Header.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post.module.css","assets/images/user.png","serviceWorker.js","redux/profile-reducer.js","redux/dialogs-reducer.js","redux/sidebar-reducer.js","redux/users-reducer.js","redux/redux-store.js","components/Header/Header.jsx","components/Navbar/Navbar.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx","components/Users/Users.jsx","components/Users/UsersContainer.jsx","App.js","index.js","components/Navbar/Navbar.module.css"],"names":["module","exports","Boolean","window","location","hostname","match","initialState","posts","id","message","likesCount","newPostText","profileReducer","state","action","type","newPost","newText","dialogs","name","messages","newMessageBody","dialogsReducer","body","sidebarReducer","users","pageSize","totalUsersCount","currentPage","usersReducer","map","u","userId","followed","count","reducers","combineReducers","profilePage","dialogsPage","sidebar","usersPage","store","createStore","Header","className","s","header","src","Navbar","nav","item","to","activeClassName","activeLink","active","ProfileInfo","descriptionBlock","Post","props","MyPosts","postsElements","p","newPostElement","React","createRef","postsBlock","onChange","text","current","value","updateNewPostText","ref","onClick","addPost","MyPostsContainer","connect","dispatch","updateNewPostTextActionCreator","Profile","DialogItem","path","dialog","Message","Dialogs","dialogsElements","d","key","messagesElements","m","dialogsItems","e","target","updateNewMessageBody","placeholder","sendMessage","DialogsContainer","updateNewMessageBodyCreator","Users","onPageChanged","pageNumber","setCurrentPage","axios","then","response","setUsers","data","items","this","setTotalUsersCount","totalCount","pagesCount","Math","ceil","pages","i","push","styles","selectedPage","photos","small","userPhoto","unfollow","follow","status","Component","followAC","unfollowAC","setUsersAC","App","render","UsersContainer","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c71042bd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__YZQhG\",\"dialogsItems\":\"Dialogs_dialogsItems__KZMPp\",\"active\":\"Dialogs_active__ANNnw\",\"messages\":\"Dialogs_messages__2hZYs\",\"message\":\"Dialogs_message__3beSW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__1J-IG\",\"posts\":\"MyPosts_posts__2TG_E\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"users_userPhoto__17NIF\",\"selectedPage\":\"users_selectedPage__1ADnJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3Glzs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__2SEfk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__29Q7k\"};","module.exports = __webpack_public_path__ + \"static/media/user.8b1dbb1f.png\";","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","const ADD_POST = 'ADD-POST';\r\nconst UPDATE_NEW_POST_TEXT = 'UPDATE-NEW-POST-TEXT';\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: 'Hi, how are you?', likesCount: 12},\r\n        {id: 2, message: 'It\\'s my first post', likesCount: 11},\r\n        {id: 3, message: 'Blabla', likesCount: 11},\r\n        {id: 4, message: 'Dada', likesCount: 11}\r\n    ],\r\n    newPostText: 'it-kamasutra.com'\r\n};\r\n\r\nconst profileReducer = (state = initialState, action) => {\r\n\r\n    switch(action.type) {\r\n        case ADD_POST: {\r\n            let newPost = {\r\n                id: 5,\r\n                message: state.newPostText,\r\n                likesCount: 0\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n                newPostText: ''\r\n            };\r\n        }\r\n        case UPDATE_NEW_POST_TEXT: {\r\n            return {\r\n                ...state,\r\n                newPostText: action.newText\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const addPostActionCreator = () => ({type: ADD_POST})\r\nexport const updateNewPostTextActionCreator = (text) =>\r\n    ({type: UPDATE_NEW_POST_TEXT, newText: text })\r\n\r\nexport default profileReducer;","const UPDATE_NEW_MESSAGE_BODY = 'UPDATE_NEW_MESSAGE_BODY';\r\nconst SEND_MESSAGE = 'SEND_MESSAGE';\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: 1, name: 'Dimych'},\r\n        {id: 2, name: 'Andrew'},\r\n        {id: 3, name: 'Sveta'},\r\n        {id: 4, name: 'Sasha'},\r\n        {id: 5, name: 'Viktor'},\r\n        {id: 6, name: 'Valera'}\r\n    ],\r\n    messages: [\r\n        {id: 1, message: 'Hi'},\r\n        {id: 2, message: 'How is your it-kamasutra?'},\r\n        {id: 3, message: 'Yo'},\r\n        {id: 4, message: 'Yo'},\r\n        {id: 5, message: 'Yo'}\r\n    ],\r\n    newMessageBody: \"\"\r\n};\r\n\r\nconst dialogsReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case UPDATE_NEW_MESSAGE_BODY:\r\n            return {\r\n                ...state,\r\n                newMessageBody: action.body\r\n            };\r\n        case SEND_MESSAGE:\r\n            let body = state.newMessageBody;\r\n            return {\r\n                ...state,\r\n                newMessageBody: '',\r\n                messages: [...state.messages, {id: 6, message: body}]\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const sendMessageCreator = () => ({type: SEND_MESSAGE})\r\nexport const updateNewMessageBodyCreator = (body) =>\r\n    ({type: UPDATE_NEW_MESSAGE_BODY, body: body})\r\n\r\nexport default dialogsReducer;","let initialState = {};\r\n\r\nconst sidebarReducer = (state = initialState, action) => {\r\n    return state;\r\n}\r\n\r\nexport default sidebarReducer;","const FOLLOW = 'FOLLOW';\r\nconst UNFOLLOW = 'UNFOLLOW';\r\nconst SET_USERS = 'SET_USERS';\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\r\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT';\r\n\r\nlet initialState = {\r\n    users: [ ],\r\n    pageSize: 5,\r\n    totalUsersCount: 0,\r\n    currentPage: 2\r\n};\r\n\r\nconst usersReducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map( u =>  {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map( u =>  {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n        case SET_USERS: {\r\n            return { ...state, users: action.users }\r\n        }\r\n        case SET_CURRENT_PAGE: {\r\n            return { ...state, currentPage: action.currentPage}\r\n        }\r\n        case SET_TOTAL_USERS_COUNT: {\r\n            return { ...state, totalUsersCount: action.count}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const followAC = (userId) => ({type: FOLLOW, userId })\r\nexport const unfollowAC = (userId) => ({type: UNFOLLOW, userId })\r\nexport const setUsersAC = (users) => ({type: SET_USERS, users })\r\nexport const setCurrentPageAC = (currentPage) => ({type: SET_CURRENT_PAGE, currentPage })\r\nexport const setUsersTotalCountAC = (totalUsersCount) => ({type: SET_TOTAL_USERS_COUNT, count: totalUsersCount })\r\n\r\nexport default usersReducer;","import {combineReducers, createStore} from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer\r\n});\r\n\r\nlet store = createStore(reducers);\r\n\r\nwindow.store = store;\r\n\r\n\r\nexport default store;","import React from 'react';\r\nimport s from './Header.module.css';\r\n\r\nconst Header = () => {\r\n    return <header className={s.header}>\r\n        <img src='https://www.freelogodesign.org/Content/img/logo-ex-7.png' />\r\n    </header>\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport s from './Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/profile\" activeClassName={s.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={`${s.item} ${s.active}`}>\r\n                <NavLink to=\"/dialogs\" activeClassName={s.activeLink}>Messages</NavLink>\r\n            </div>\r\n            <div className={`${s.item} ${s.active}`}>\r\n                <NavLink to=\"/users\" activeClassName={s.activeLink}>Users</NavLink>\r\n            </div>\r\n\r\n            <div className={s.item}>\r\n                <a>News</a>\r\n            </div>\r\n            <div className={s.item}>\r\n                <a>Music</a>\r\n            </div>\r\n            <div className={s.item}>\r\n                <a>Settings</a>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\n\r\nconst ProfileInfo = () => {\r\n    return (\r\n        <div>\r\n            <div>\r\n                <img\r\n                    src='https://images.pexels.com/photos/248797/pexels-photo-248797.jpeg?auto=compress&cs=tinysrgb&h=350'/>\r\n            </div>\r\n            <div className={s.descriptionBlock}>\r\n                ava + description\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n  return (\r\n    <div className={s.item}>\r\n      <img src='https://movies4maniacs.liberty.me/wp-content/uploads/sites/1218/2015/09/avatarsucks.jpg' />\r\n        { props.message }\r\n          <div>\r\n        <span>like</span> { props.likesCount }\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\n\r\nconst MyPosts = (props) => {\r\n    let postsElements =\r\n        props.posts.map( p => <Post message={p.message} likesCount={p.likesCount}/>);\r\n\r\n    let newPostElement = React.createRef();\r\n\r\n    let onAddPost = () => {\r\n        props.addPost();\r\n    }\r\n\r\n    let onPostChange = () => {\r\n        let text = newPostElement.current.value;\r\n        props.updateNewPostText(text);\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n                <div>\r\n                    <textarea onChange={ onPostChange } ref={newPostElement}\r\n                              value={props.newPostText} />\r\n                </div>\r\n                <div>\r\n                    <button onClick={ onAddPost }>Add post</button>\r\n                </div>\r\n            </div>\r\n            <div className={s.posts}>\r\n                { postsElements }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport {addPostActionCreator, updateNewPostTextActionCreator} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateNewPostText: (text) => {\r\n            let action = updateNewPostTextActionCreator(text);\r\n            dispatch(action);\r\n        },\r\n        addPost: () => {\r\n            dispatch(addPostActionCreator());\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nconst Profile = () => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo />\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n\r\n    return <div className={s.dialog + ' ' + s.active}>\r\n        <NavLink to={path}>{props.name}</NavLink>\r\n    </div>\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\nconst Message = (props) => {\r\n    return <div className={s.dialog}>{props.message}</div>\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElements = state.dialogs.map( d => <DialogItem name={d.name} key={d.id} id={d.id} />  );\r\n    let messagesElements = state.messages.map( m => <Message message={m.message} key={m.id} /> );\r\n    let newMessageBody = state.newMessageBody;\r\n\r\n    let onSendMessageClick = () => {\r\n        props.sendMessage();\r\n    }\r\n\r\n    let onNewMessageChange = (e) => {\r\n        let body = e.target.value;\r\n        props.updateNewMessageBody(body);\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                { dialogsElements }\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{ messagesElements }</div>\r\n                <div>\r\n                    <div><textarea value={newMessageBody}\r\n                                   onChange={onNewMessageChange}\r\n                                   placeholder='Enter your message'></textarea></div>\r\n                    <div><button onClick={onSendMessageClick}>Send</button></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport {sendMessageCreator, updateNewMessageBodyCreator} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMessage: () => {\r\n            dispatch(sendMessageCreator());\r\n        },\r\n        updateNewMessageBody: (body) => {\r\n            dispatch(updateNewMessageBodyCreator(body));\r\n        }\r\n    }\r\n}\r\n\r\nconst DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(Dialogs);\r\n\r\nexport default DialogsContainer;","import React from 'react';\r\nimport styles from './users.module.css';\r\nimport * as axios from 'axios';\r\nimport userPhoto from '../../assets/images/user.png';\r\n\r\n\r\nclass Users extends React.Component {\r\n    componentDidMount() {\r\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${this.props.currentPage}&count=${this.props.pageSize}`)\r\n            .then(response => {\r\n                this.props.setUsers(response.data.items);\r\n                this.props.setTotalUsersCount(response.data.totalCount);\r\n            });\r\n    }\r\n\r\n    onPageChanged = (pageNumber) => {\r\n        this.props.setCurrentPage(pageNumber);\r\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${pageNumber}&count=${this.props.pageSize}`)\r\n            .then(response => {\r\n                this.props.setUsers(response.data.items);\r\n            });\r\n    }\r\n\r\n    render() {\r\n\r\n        let pagesCount = Math.ceil (this.props.totalUsersCount / this.props.pageSize);\r\n\r\n        let pages = [];\r\n        for (let i=1; i <= pagesCount; i++) {\r\n            pages.push(i);\r\n        }\r\n\r\n        return <div>\r\n            <div>\r\n                { pages.map( p => {\r\n                    return <span className={this.props.currentPage ===  p && styles.selectedPage }\r\n                    onClick={(e) => { this.onPageChanged(p); }}>{p}</span>\r\n                })}\r\n            </div>\r\n            {\r\n                this.props.users.map(u => <div key={u.id}>\r\n                <span>\r\n                    <div>\r\n                        <img src={u.photos.small != null ? u.photos.small : userPhoto} className={styles.userPhoto}/>\r\n                    </div>\r\n                    <div>\r\n                        {u.followed\r\n                            ? <button onClick={() => {\r\n                                this.props.unfollow(u.id)\r\n                            }}>Unfollow</button>\r\n                            : <button onClick={() => {\r\n                                this.props.follow(u.id)\r\n                            }}>Follow</button>}\r\n\r\n                    </div>\r\n                </span>\r\n                    <span>\r\n                    <span>\r\n                        <div>{u.name}</div>\r\n                        <div>{u.status}</div>\r\n                    </span>\r\n                    <span>\r\n                        <div>{\"u.location.country\"}</div>\r\n                        <div>{\"u.location.city\"}</div>\r\n                    </span>\r\n                </span>\r\n                </div>)\r\n            }\r\n        </div>\r\n    }\r\n}\r\n\r\n\r\nexport default Users;","import React from 'react';\r\nimport Users from \"./Users\";\r\nimport {connect} from \"react-redux\";\r\nimport {followAC, setCurrentPageAC, setUsersAC, setUsersTotalCountAC, unfollowAC} from \"../../redux/users-reducer\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        users: state.usersPage.users,\r\n        pageSize: state.usersPage.pageSize,\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        currentPage: state.usersPage.currentPage\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        follow: (userId) => {\r\n            dispatch(followAC(userId));\r\n        },\r\n        unfollow: (userId) => {\r\n            dispatch(unfollowAC(userId));\r\n        },\r\n        setUsers: (users) => {\r\n            dispatch(setUsersAC(users));\r\n        },\r\n        setCurrentPage: (pageNumber) => {\r\n            dispatch(setCurrentPageAC(pageNumber))\r\n        },\r\n        setTotalUsersCount: (totalCount) => {\r\n            dispatch(setUsersTotalCountAC(totalCount))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Users);","import React from 'react';\r\nimport './App.css';\r\nimport Header from './components/Header/Header';\r\nimport Navbar from './components/Navbar/Navbar';\r\nimport Profile from './components/Profile/Profile';\r\nimport {Route} from \"react-router-dom\";\r\nimport DialogsContainer from \"./components/Dialogs/DialogsContainer\";\r\nimport UsersContainer from \"./components/Users/UsersContainer\";\r\n\r\nconst App = () => {\r\n    return (\r\n            <div className='app-wrapper'>\r\n                <Header />\r\n                <Navbar />\r\n                <div className='app-wrapper-content'>\r\n                    <Route path='/dialogs'\r\n                           render={ () => <DialogsContainer /> }/>\r\n\r\n                    <Route path='/profile'\r\n                           render={ () => <Profile /> }/>\r\n\r\n                    <Route path='/users'\r\n                           render={ () => <UsersContainer /> }/>\r\n\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n}\r\n\r\nexport default App;","import * as serviceWorker from './serviceWorker';\r\nimport store from \"./redux/redux-store\";\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </BrowserRouter>, document.getElementById('root'));\r\n\r\n\r\n// API\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__i_-AK\",\"item\":\"Navbar_item__1wDcJ\",\"activeLink\":\"Navbar_activeLink__3Ig2B\"};"],"sourceRoot":""}